import argparse


def recovery_file(recovery_filename, back_to_toc='Back to'):
    head_lines = 0
    output_file = []
    last_line = ''
    with open(recovery_filename, 'r', encoding='utf-8') as f:
        for line in f:
            if not line.startswith(('<a class="toc"', f'[{back_to_toc}')):
                # Because I add 1 blank line below when generated [Back to TOC]
                if not last_line.startswith(f'[{back_to_toc}') or line.strip():
                    output_file.append(line)
            elif line.startswith('<a class="toc"'):
                head_lines += 1
            last_line = line
    toc_pos = output_file.index('# Table of Contents\n')
    with open(recovery_filename, 'w', encoding='utf-8') as f:
        if toc_pos:
            f.writelines(output_file[:toc_pos])
        # Avoid the blank lines which are add by "Generate_TOC.py" (I add 2 blank lines undet the TOCs.)
        while not output_file[toc_pos + head_lines + 1].strip():
            head_lines += 1
        f.writelines(output_file[toc_pos + head_lines + 1:])


def parse_args():
    parser = argparse.ArgumentParser(
        description=
        'Recover your Markdown file with TOC (generated by Generate_TOC.py).')
    parser.add_argument('input_filename',
                        metavar='recovery filename',
                        type=str,
                        help='The file that need to recover.')

    parser.add_argument(
        '-b',
        '--back_to_toc',
        metavar='Back to TOC string',
        type=str,
        nargs='?',
        default='Back to TOC',
        help=
        'Specify the "back to TOC" anchor under the First level heading, so as to move from.'
    )

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    recovery_filename = args.input_filename
    back_to_toc = args.back_to_toc
    confirm = input(f'### Recover from file: {recovery_filename} [Y/N]\n')
    if confirm.strip().lower() == 'y':
        recovery_file(recovery_filename, back_to_toc)
        print('### Recovery done')
    elif confirm.strip().lower() == 'n':
        print('### Terminate the recovery.\nThe program has finished.')
    else:
        print(f'### Invalid argument for {confirm}.')
